<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nginx-auth_basic</title>
      <link href="/2023/09/11/nginx-auth-basic/"/>
      <url>/2023/09/11/nginx-auth-basic/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx-中的-auth-basic"><a href="#nginx-中的-auth-basic" class="headerlink" title="nginx 中的 auth_basic"></a>nginx 中的 auth_basic</h1>]]></content>
      
      
      <categories>
          
          <category> vps </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-设置代理</title>
      <link href="/2023/05/12/Linux-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
      <url>/2023/05/12/Linux-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux代理"><a href="#Linux代理" class="headerlink" title="Linux代理"></a>Linux代理</h2><p>Linux中设置代理的参数有: all_proxy、http_proxy、https_proxy,可以根据实际需要设置全部代理、https、http以及sock5。<br>如果设置了以上的这些参数，主要是为了代理应用层的 HTTP&#x2F;HTTPS 流量，而不直接影响其他网络层。具体而言，它只会对使用 HTTP&#x2F;HTTPS 协议进行通信的应用程序生效。例如:<br>代理的类型分为两种: 临时代理、全局代理。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-网卡参数</title>
      <link href="/2023/05/09/Linux-%E7%BD%91%E5%8D%A1%E5%8F%82%E6%95%B0/"/>
      <url>/2023/05/09/Linux-%E7%BD%91%E5%8D%A1%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">名称</span>  </span><br><span class="line"><span class="attr">devic:</span> <span class="string">设备名</span>  </span><br><span class="line"><span class="attr">BOOTPROTO:</span> <span class="string">必须设置，改为static，固定IP</span></span><br><span class="line"><span class="attr">ONBOOT:</span> <span class="string">必须设置，原来是no，改为yes，否则无法连接。ONBOOT是指明在系统启动时是否激活网卡，只有在激活状态的网卡才能去连接网络，进行网络通讯。</span></span><br><span class="line"><span class="attr">IPADDR:</span> <span class="string">必须设置，设置的网卡IP地址（自己定义）</span></span><br><span class="line"><span class="attr">NETMASK:</span> <span class="string">必须设置，255.255.255.0网卡IP对应的子网掩码。</span></span><br><span class="line"><span class="string">PREFIX=24:</span> <span class="string">等同于netmask：255.255.255.0，与NETMASK只设置一个即可</span></span><br><span class="line"><span class="attr">GATEWAY:</span> <span class="string">必须设置，网卡对于的网关IP</span></span><br><span class="line"><span class="attr">DNS1:</span> <span class="string">必须设置，设置成功则可以上网。网卡对应的第一个DNS地址，域名解析服务器</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandora-docker-compose</title>
      <link href="/2023/05/09/pandora-docker-compose/"/>
      <url>/2023/05/09/pandora-docker-compose/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-pandora"><a href="#什么是-pandora" class="headerlink" title="什么是 pandora ?"></a>什么是 pandora ?</h2><p>​潘多拉<a href="https://github.com/pengzhile/pandora">(pandora)</a>，一个让你呼吸顺畅的 ChatGPT。潘多拉实现了网页版 ChatGPT 的主要操作。后端优化，绕过 Cloudflare，速度喜人。</p><h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">pandora:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">pengzhile/pandora</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">pandoraGPT</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">20800</span><span class="string">:20800</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PANDORA_SERVER=0.0.0.0:20800</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PANDORA_CLOUD=true</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pandora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT-Prompt-Engineering</title>
      <link href="/2023/05/08/ChatGPT-Prompt-Engineering/"/>
      <url>/2023/05/08/ChatGPT-Prompt-Engineering/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python 使用 multipart/form-data 上传照片</title>
      <link href="/2022/12/22/python-%E4%BD%BF%E7%94%A8-multipart-form-data-%E4%B8%8A%E4%BC%A0%E7%85%A7%E7%89%87/"/>
      <url>/2022/12/22/python-%E4%BD%BF%E7%94%A8-multipart-form-data-%E4%B8%8A%E4%BC%A0%E7%85%A7%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​今天想使用 python 上传图片到自己的兰空图床上，发现图床只能使用 multipart&#x2F;form-data 请求上传，也了解了 multipart&#x2F;form-data 请求的原理。文末会贴出大佬解析原理的链接。</p><h2 id="python-代码部分"><a href="#python-代码部分" class="headerlink" title="python 代码部分"></a>python 代码部分</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests_toolbelt.multipart.encoder <span class="keyword">import</span> MultipartEncoder</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://XXX.XXXX.XXXX/api/v1/upload&quot;</span></span><br><span class="line"></span><br><span class="line">fl = <span class="built_in">open</span>(<span class="string">r&quot;XXXXXXX.png&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">multipart_encoder = MultipartEncoder(</span><br><span class="line">    fields=&#123;</span><br><span class="line">        <span class="string">&quot;file&quot;</span>: (<span class="string">&quot;XXXXXXX.png&quot;</span>, fl, <span class="string">&quot;image/png&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># boundary 该参数作为请求信息中的分割符号，没用具体含义</span></span><br><span class="line">    boundary=<span class="string">&quot;----WebKitFormBoundary&quot;</span> + <span class="string">&quot;&quot;</span>.join(random.sample(<span class="string">&quot;0123456789abcdef&quot;</span>, <span class="number">16</span>))</span><br><span class="line">)</span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: multipart_encoder.content_type</span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url, data=multipart_encoder, headers=header)</span><br><span class="line"><span class="built_in">print</span>(res.request.body)</span><br><span class="line"><span class="built_in">print</span>(res.json())</span><br></pre></td></tr></table></figure><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p>​理解 HTTP 协议中的 multipart&#x2F;form-data ：<a href="https://zhuanlan.zhihu.com/p/459122038">https://zhuanlan.zhihu.com/p/459122038</a></p><p>​python multipart&#x2F;form-data 上传图片：<a href="https://www.jianshu.com/p/816f312623ae">https://www.jianshu.com/p/816f312623ae</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用 linux 命令</title>
      <link href="/2022/12/20/%E5%B8%B8%E7%94%A8-linux-%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/12/20/%E5%B8%B8%E7%94%A8-linux-%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="修改-Hostname"><a href="#修改-Hostname" class="headerlink" title="修改 Hostname"></a>修改 Hostname</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname &lt;hostname&gt;</span><br></pre></td></tr></table></figure><h2 id="GCC依赖问题"><a href="#GCC依赖问题" class="headerlink" title="GCC依赖问题"></a>GCC依赖问题</h2><p>GCC升级问题解决：configure: error: Building GCC requires GMP 4.2+, MPFR 2.4.0+ and MPC 0.8.0+.，mpfr2.4.0<br>如果遇到类似问题：</p><p>configure: error: Building GCC requires GMP 4.2+, MPFR 2.4.0+ and MPC 0.8.0+.，mpfr2.4.0</p><p>解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install  gmp  gmp-devel  mpfr  mpfr-devel  libmpc  libmpc-devel</span><br></pre></td></tr></table></figure><h2 id="查看端口号"><a href="#查看端口号" class="headerlink" title="查看端口号"></a>查看端口号</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vps </category>
          
          <category> 常用命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10 解决端口被占用问题</title>
      <link href="/2022/11/16/Windows-10-%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2022/11/16/Windows-10-%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>本文转载自：<a href="https://prime167.github.io/post/2021-10-28-Windows10-Port/">https://prime167.github.io/post/2021-10-28-Windows10-Port/</a><br>如涉及到侵权等问题请联系我：<a href="mailto:&#109;&#97;&#x69;&#108;&#x40;&#x77;&#x65;&#105;&#113;&#x68;&#46;&#110;&#x65;&#116;">&#109;&#97;&#x69;&#108;&#x40;&#x77;&#x65;&#105;&#113;&#x68;&#46;&#110;&#x65;&#116;</a></p><h1 id="Windows-10-解决端口被占用问题"><a href="#Windows-10-解决端口被占用问题" class="headerlink" title="Windows 10 解决端口被占用问题"></a>Windows 10 解决端口被占用问题</h1><p>前几天启动hugo server时提示1313端口被占用，给分配了一个随机端口，打开自己写的程序，mqtt默认的1883端口也被占用，使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | findstr 1883</span><br></pre></td></tr></table></figure><p>没有任何返回 一番Google后得知某些端口被Hyper-V保留了。 解决方法：</p><ol><li>关闭Hyper-V</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /Online /Disable-Feature:Microsoft-Hyper-V</span><br></pre></td></tr></table></figure><ol start="2"><li>重启后设置你想保留的端口，这样Hyper-V就不能再占用</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 排除ipv4动态端口占用 startport 起始端口 numberofports 端口数</span></span><br><span class="line">netsh int ipv4 add excludedportrange protocol=tcp startport=&lt;your port&gt; numberofports=1</span><br></pre></td></tr></table></figure><p>对于1313和1883端口，我执行了两次此命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netsh int ipv4 add excludedportrange protocol=tcp startport=1313 numberofports=1</span><br><span class="line">netsh int ipv4 add excludedportrange protocol=tcp startport=1883 numberofports=1</span><br></pre></td></tr></table></figure><ol start="3"><li>重新启用Hyper-V,需要重启</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All</span><br></pre></td></tr></table></figure><p>再次查看端口排除范围（被系统或者我们自己保留的端口）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">λ netsh int ipv4 show excludedportrange tcp</span><br><span class="line"></span><br><span class="line">协议 tcp 端口排除范围</span><br><span class="line"></span><br><span class="line">开始端口    结束端口</span><br><span class="line">----------    --------</span><br><span class="line">        80          80</span><br><span class="line">      1313        1313     *</span><br><span class="line">      1883        1883     *</span><br><span class="line">      1899        1998</span><br><span class="line">      1999        2098</span><br><span class="line">      2108        2207</span><br><span class="line">      2208        2307</span><br><span class="line">      2308        2407</span><br><span class="line">      2422        2521</span><br><span class="line">      2522        2621</span><br><span class="line">      2622        2721</span><br><span class="line">      2722        2821</span><br><span class="line">      2822        2921</span><br><span class="line">      5357        5357</span><br><span class="line">     45000       45000</span><br><span class="line">     50000       50059     *</span><br><span class="line"></span><br><span class="line">* - 管理的端口排除。</span><br></pre></td></tr></table></figure><p>带*就是我上面添加的。</p><p>如果要取消保留端口，可以执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh int ipv4 delete excludedportrange protocol=tcp startport=&lt;your port&gt; numberofports=1</span><br></pre></td></tr></table></figure><p>鸣谢本文作者：prime167</p>]]></content>
      
      
      <categories>
          
          <category> Windows10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 免登录下载</title>
      <link href="/2022/10/16/java-%E5%85%8D%E7%99%BB%E5%BD%95%E4%B8%8B%E8%BD%BD/"/>
      <url>/2022/10/16/java-%E5%85%8D%E7%99%BB%E5%BD%95%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>​今天想使用 Linux 直接拉取 Oracle Java 安装包。但是想起 Oracle Java 下载需要登录，太麻烦了，想避免登录。于是找到了 Adobe 的下载站，居然提供 Oracle Java 安装包。</p><h1 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h1><p><a href="https://helpx.adobe.com/coldfusion/kb/coldfusion-downloads.html">https://helpx.adobe.com/coldfusion/kb/coldfusion-downloads.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app 离线打包</title>
      <link href="/2022/09/24/uni-app-%E7%A6%BB%E7%BA%BF%E6%89%93%E5%8C%85/"/>
      <url>/2022/09/24/uni-app-%E7%A6%BB%E7%BA%BF%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>本文将指导如何实现 uni-app 和原生安卓的混合开发</p><p><strong>uni-app 和原生 App 混合开发问题：</strong></p><p>首先务必确认 uni-app 和原生代码，谁是主谁是从的问题。</p><ul><li>如果你的应用是 uni-app 开发的，需要扩展一些原生能力，那么首先去<a href="https://ext.dcloud.net.cn/">插件市场</a>看看有没有现成的插件，如果没有，就自己开发，开发文档请参考<a href="https://nativesupport.dcloud.net.cn/NativePlugin/README">原生插件开发教程</a>。</li><li>如果你的 App 是原生开发的，部分功能栏目想通过 uni-app 实现，有 2 种方式<ul><li>在原生 App 里集成 uni小程序 sdk ，<a href="https://nativesupport.dcloud.net.cn/README">参考</a>。</li><li>如果不想集成原生 sdk ，那就把 uni-app 代码发布成 H5 方式，在原生 App 里通过 webview 打开。</li></ul></li></ul><p>如果应用是 uni-app 开发为主，只是想离线打包，那么不应该使用 uni小程序 sdk ，而是使用 App 离线打包 SDK ，<a href="https://nativesupport.dcloud.net.cn/AppDocs/README">参考</a>。 另注意离线打包无法享受插件市场的付费原生插件，如有相关需求需自己进行原生插件开发。</p><p>本文我们只讨论第一种情况，即：应用是 uni-app 开发的，需要扩展一些原生能力。</p><p><a name="anchor"></a> 开发环境情况与所需文件</p><ol><li><p>Android Studio</p></li><li><p>JDK 1.8</p></li><li><p>HBuilderX（3.6.3.20220917）</p></li><li><p>DCloud账号</p></li><li><p>Android 离线 5+SDK</p><p> <a href="https://pan.baidu.com/s/14SZ-CjlbaNtGHk3CpamgXQ">百度云</a>，提取码: 7rfu</p></li></ol><h1 id="创建-uni-app-应用"><a href="#创建-uni-app-应用" class="headerlink" title="创建 uni-app 应用"></a>创建 uni-app 应用</h1><p>​<a href="https://dev.dcloud.net.cn/pages/common/login">登录DCloud</a>，进入开发者管理后台。</p><p>​点击创建应用</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252124241.png" alt="202209252124241"></p><p>​创建 uni-app 项目</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252131219.png" alt="202209252131219"></p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202210132345564.png" alt="202210132345564"></p><p>​Android 系统要求所有 APK 必须先使用证书进行数字签名，然后才能安装到设备上或进行更新。所以要使得我们的  uni-app 应用，能够离线打包，支持原生插件，那接下来的一步就是生成签名证书。</p><h1 id="关于生成-Android-证书"><a href="#关于生成-Android-证书" class="headerlink" title="关于生成 Android 证书"></a>关于生成 Android 证书</h1><p>目前我们生成证书的途径主要有两种：</p><ul><li>使用 keytool 生成 Android 证书（证书的可定制性高，但是对新手并不友好。</li><li>使用 DCloud 官方提供的自动生成证书的功能（证书的可定制性不高，但是对新手友好。</li></ul><p>接下来作者将介绍这两种方式生成 Android 证书。</p><h1 id="使用-keytool-生成-Android-证书"><a href="#使用-keytool-生成-Android-证书" class="headerlink" title="使用 keytool 生成 Android 证书"></a>使用 keytool 生成 Android 证书</h1><p>​可详见 DCloud 官方书写的<a href="https://ask.dcloud.net.cn/article/35777">Android平台签名证书(.keystore)生成指南</a></p><h2 id="生成签名证书"><a href="#生成签名证书" class="headerlink" title="生成签名证书"></a>生成签名证书</h2><p>​打开命令行（cmd）</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209251238716.png" alt="202209251238716"></p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209251950291.png" alt="202209251950291"></p><p>​输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> testalias -keyalg RSA -keysize 2048 -validity 36500 -keystore test.keystore</span><br></pre></td></tr></table></figure><ul><li><p>testalias是证书别名，可修改为自己想设置的字符，建议使用英文字母和数字</p></li><li><p>test.keystore是证书文件名称，可修改为自己想设置的文件名称，也可以指定完整文件路径</p></li><li><p>36500是证书的有效期，表示100年有效期，单位天，建议时间设置长一点，避免证书过期</p></li></ul><p>回车后会提示：</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209251954227.png" alt="202209251954227"></p><h2 id="查看证书信息"><a href="#查看证书信息" class="headerlink" title="查看证书信息"></a>查看证书信息</h2><p>可以使用以下命令查看证书信息：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -v -keystore test.keystore  </span><br><span class="line">Enter keystore password: //输入密码，回车</span><br></pre></td></tr></table></figure><p>会输出以下格式信息：</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252054748.png" alt="202209252054748"></p><p>其中证书指纹信息（Certificate fingerprints ）：</p><ul><li>MD5<br>证书的 MD5 指纹信息（安全码MD5）</li><li>SHA1<br>证书的 SHA1 指纹信息（安全码SHA1）</li><li>SHA256<br>证书的 SHA256 指纹信息（安全码SHA245）</li></ul><p>生成的证书将会出现在该路径下：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\User\&lt;用户名&gt;\</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252022257.png" alt="202209252022257"></p><h1 id="使用-DCloud-官方提供的自动生成证书的功能，生成-Android-证书"><a href="#使用-DCloud-官方提供的自动生成证书的功能，生成-Android-证书" class="headerlink" title="使用 DCloud 官方提供的自动生成证书的功能，生成 Android 证书"></a>使用 DCloud 官方提供的自动生成证书的功能，生成 Android 证书</h1><p>回到 DCloud 的开发者后台</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252158397.png" alt="202209252158397"></p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252159497.png" alt="202209252159497"></p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252200583.png" alt="202209252200583"></p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252200416.png" alt="202209252200416"></p><h2 id="查看证书详情"><a href="#查看证书详情" class="headerlink" title="查看证书详情"></a>查看证书详情</h2><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252204781.png" alt="202209252204781"></p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252203804.png" alt="202209252203804"></p><h1 id="Android-Studio-导入官方的-5-SDK"><a href="#Android-Studio-导入官方的-5-SDK" class="headerlink" title="Android Studio 导入官方的 5+SDK"></a>Android Studio 导入官方的 5+SDK</h1><p>​我们已经完成了签名证书的生成。接下来，我们要通过修改 uni-app 官方提供的 5+SDK 成为我们自己的 Android 项目。(PS: 5+SDK 的链接见本文开头的 “<a href="#anchor">开发环境情况与所需文件</a>” 列表)</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252220939.png" alt="202209252220939"></p><h2 id="使用-Android-Studio-打开该项目"><a href="#使用-Android-Studio-打开该项目" class="headerlink" title="使用 Android Studio 打开该项目"></a>使用 Android Studio 打开该项目</h2><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252231912.png" alt="202209252231912"></p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252234093.png" alt="202209252234093"></p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252235281.png" alt="202209252235281"></p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252240468.png" alt="202209252240468"></p><p>新建类包，实现自定义包名</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252311414.png" alt="202209252311414"></p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252312827.png" alt="202209252312827"></p><p>在 DCloud 开发者后台，输入包名，以及签名证书的 SHA1 ，并保存。</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252314809.png" alt="202209252314809"></p><p>保存成功后，该应用的 App Key 将会显示。</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252315188.png" alt="202209252315188"></p><p>将其复制粘贴到 </p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252320128.png" alt="202209252320128"></p><h1 id="uni-app-部分"><a href="#uni-app-部分" class="headerlink" title="uni-app 部分"></a>uni-app 部分</h1><p>​我们已经完成了 Android Studio 导入并修改官方 5+SDK 的操作。接下来，我们将会使用 HBuilderX 构建一个 uni-app 应用，并完成 uni-app 方面的打包。</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252243774.png" alt="202209252243774"></p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252248102.png"></p><p>将该项目的 appid 修改为 DCloud 开发者后台对应应用的 appid。(PS: 如果你在后台新建了应用，那一般都是会自动对应的。如果没有对应，就只能手动修改了。)</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252250229.png" alt="202209252250229"></p><p>将 uni-app 应用打包为 Android 资源包</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252256892.png" alt="202209252256892"></p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252259348.png" alt="202209252259348"></p><p>将打包出来的资源包，拷贝出来</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209260843466.png"></p><h1 id="整合-uni-app-与-Android-代码，完成打包"><a href="#整合-uni-app-与-Android-代码，完成打包" class="headerlink" title="整合 uni-app 与 Android 代码，完成打包"></a>整合 uni-app 与 Android 代码，完成打包</h1><p>打开 dcloud_control.xml 文件修改 appid 与 appvar (应用版本号)</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252323221.png" alt="202209252323221"></p><p>将我们上文中得到的资源包，覆盖 “__UNI__E”，这个文件。</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252326248.png" alt="202209252326248"></p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252327979.png" alt="202209252327979"></p><p>将我们之前生成好的证书放入项目，并配置对应参数。</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252333758.png" alt="202209252333758"></p><p>将主的AndroidManifest.xml 文件头的 package 修改为我们在 DCloud 开发者后台设置的包名</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252347155.png" alt="202209252347155"></p><p>将项目的主 build.gradle 文件的 applicationId 修改为我们在 DCloud 开发者后台设置的包名</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209252347295.png" alt="202209252347295"></p><h1 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h1><p>连接上安卓设备，右上角点击绿色三角形，运行代码。</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209260901893.png" alt="202209260901893"></p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209260901452.jpg" alt="202209260901452"></p><h2 id="关于未配置appkey或配置错误的问题"><a href="#关于未配置appkey或配置错误的问题" class="headerlink" title="关于未配置appkey或配置错误的问题"></a>关于未配置appkey或配置错误的问题</h2><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/202209260902419.jpg" alt="202209260902419"></p><p>请仔细检查：</p><ul><li>uni-app 部分的代码， manifwst.json (文件)-&gt; 源码视图 -&gt; appid (键值对) ， appid 是否修改</li><li>Android 部分代码，app (文件夹) -&gt; build.gradle (文件) -&gt; applicationId (键值对)</li><li>Android 部分代码，app (文件夹) -&gt; src (文件夹) -&gt; main (文件夹) -&gt; AndroidManifest.xml (文件) -&gt; 文件头的 package 参数</li><li>Android 部分代码，app (文件夹) -&gt; src (文件夹) -&gt; main (文件夹) -&gt; AndroidManifest.xml (文件) -&gt; meta-data (参数) -&gt; android:value (参数)</li><li>Android 部分代码，app (文件夹) -&gt; src (文件夹) -&gt; main (文件夹) -&gt; assets (文件夹) -&gt; data (文件夹) -&gt; dcloud_control.xml (文件) -&gt; appid (参数)</li><li>Android 部分代码，app (文件夹) -&gt; src (文件夹) -&gt; main (文件夹) -&gt; assets (文件夹) -&gt; data (文件夹) -&gt; dcloud_control.xml (文件) -&gt; appver (参数)</li></ul><h1 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h1><p>uni-app Android 部分代码地址：<a href="https://github.com/weiqhcode/UniPlugin-Hello-AS">https://github.com/weiqhcode/UniPlugin-Hello-AS</a></p><p>uni-app js 部分代码地址：<a href="https://github.com/weiqhcode/uni-app-test">https://github.com/weiqhcode/uni-app-test</a></p>]]></content>
      
      
      <categories>
          
          <category> uni-app </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat7 的环境变量配置与注册系统服务</title>
      <link href="/2022/09/12/Tomcat7-%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%B3%A8%E5%86%8C%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/09/12/Tomcat7-%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%B3%A8%E5%86%8C%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>本文将介绍如何在  CentOS7 部署 Tomcat<br>PS: 本文同时适用于 Debian 11、 Debian 10 Buster、Ubuntu 20.04 Focal 以及 Ubuntu 18.04 Bionic*</p><h2 id="安装约定"><a href="#安装约定" class="headerlink" title="安装约定:"></a>安装约定:</h2><hr><p>安装包文件存放位置: &#x2F;opt&#x2F;</p><p>Tomcat 下载链接: <a href="https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.82/bin/apache-tomcat-8.5.82.tar.gz">https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.82/bin/apache-tomcat-8.5.82.tar.gz</a></p><p>Tomcat 安装位置: &#x2F;usr&#x2F;local&#x2F;src&#x2F;Tomcat</p><p>Java 安装位置: &#x2F;usr&#x2F;local&#x2F;src&#x2F;Java</p><h2 id="什么是Tocmat？"><a href="#什么是Tocmat？" class="headerlink" title="什么是Tocmat？"></a>什么是Tocmat？</h2><hr><p>Apache Tomcat是由Apache Software Foundation（ASF）开发的一个，被广泛使用的Java WEB应用服务器。</p><h2 id="配置JDK"><a href="#配置JDK" class="headerlink" title="配置JDK"></a>配置JDK</h2><hr>]]></content>
      
      
      <categories>
          
          <category> vps </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 docker 运行 python 应用</title>
      <link href="/2022/09/12/%E4%BD%BF%E7%94%A8-docker-%E8%BF%90%E8%A1%8C-python-%E5%BA%94%E7%94%A8/"/>
      <url>/2022/09/12/%E4%BD%BF%E7%94%A8-docker-%E8%BF%90%E8%A1%8C-python-%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3>]]></content>
      
      
      <categories>
          
          <category> 常用 </category>
          
          <category> Docker </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哪吒监控搭建</title>
      <link href="/2022/09/11/%E5%93%AA%E5%90%92%E7%9B%91%E6%8E%A7%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/09/11/%E5%93%AA%E5%90%92%E7%9B%91%E6%8E%A7%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="哪吒监控"><a href="#哪吒监控" class="headerlink" title="哪吒监控"></a>哪吒监控</h3>]]></content>
      
      
      <categories>
          
          <category> vps </category>
          
          <category> 哪吒监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> 哪吒监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/11/hello-world/"/>
      <url>/2022/09/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> HelloWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HelloWorld </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql 百题心得</title>
      <link href="/2022/04/07/mysql-%E7%99%BE%E9%A2%98%E5%BF%83%E5%BE%97/"/>
      <url>/2022/04/07/mysql-%E7%99%BE%E9%A2%98%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点补充"><a href="#知识点补充" class="headerlink" title="知识点补充"></a>知识点补充</h1><h2 id="SQL的思想"><a href="#SQL的思想" class="headerlink" title="SQL的思想"></a>SQL的思想</h2><h3 id="面向集合的思想"><a href="#面向集合的思想" class="headerlink" title="面向集合的思想"></a>面向集合的思想</h3><p>​SQL 是为查询和管理关系型数据库中的数据而专门设计的一种标准语言。我们通常认为的关系型是说的数据库中表与表的关系，这个理解是有问题的，这里的关系其实是数学术语上的关系。<br>为什么这么说？<br>​<mark>因为关系型数据库是以关系模型为基础</mark>，而关系模型是以集合论和谓词逻辑两大数学理论为依据的。集合论中，关系是集合的一种表示。在关系模型中，<mark>关系是相关信息的一个集合</mark>，反映到数据库中就是一张表。<br>我们知道<mark>集合是不关心顺序的</mark>。表作为一个集合，<mark>它本身并没有顺序的概念</mark>。在很久之前有人问过，我按顺序插入id&#x3D;1,2,3的记录，为什么查处来时和插入的顺序不一致。很多人都有这样的认为，就是从表选取记录时，记录是按插入顺序或主键的大小顺序返回的。在 SQL 评审中也经常遇到不带 ORDERBY  的 LIMIT 语句。<br>​这么写实际上是有问题的，不带ORDER BY子句的查询只表示从集合中查询数据，返回的结果是不确定的，之所以结果看起来对的，是因为 MySQL 访问数据的方式和你的需求恰巧一致了，表上索引或数据的变化都可能会影响到你的结果。因此要牢记不要为表中的行假定任何特定的顺序，<mark>确定需要按某个顺序取数时显式的加上 ORDER BY </mark>。<br>​很多人都是先有面向过程和面向对象的对象的编程经验后开始 SQL 编程的，这往往限制了对 SQL 问题的思考。<br>​ SQL 和传统编程语言最大的区别是它以关系模型和集合论为背景。在 SQL 编程中最能体现面向过程和面向集合区别的就是对游标的使用，面向过程的编程同样体现在使用中对子查询、派生表、以及临时表的过多依赖。许多人的编程经验是把一个任务细分成许多小任务，而后按一定的顺序来实现它们或先把需要的数据存储在各个临时表或先包含在派生表里再做关联处理。<mark>但如果按这种方式处理 SQL 编程，可能只会得到平庸的结果。</mark><br>​这类实现往往是代码很长，很难维护，欠缺灵活性，而最大问题是由于相对固化的处理逻辑限制了优化器的优化空间，<mark>大多数情况下这类面向过程的实现在性能上都远不如面向集合的实现</mark>。编写高效的 SQL 需要我们跳出原有面向过程的思维方式，换一种思维方式去思考问题。<mark>可以总结为：解决 SQL 问题时要关注的是获取“什么”，而不是“如何”去获取</mark>。 SQL 是一门注重思想而非技巧的语言。</p><p><a href="https://www.cnblogs.com/Alight/p/3649412.html">https://www.cnblogs.com/Alight/p/3649412.html</a></p><h2 id="SQL-语句的执行顺序"><a href="#SQL-语句的执行顺序" class="headerlink" title="SQL 语句的执行顺序"></a>SQL 语句的执行顺序</h2><p>有些情况下 Select 语句没有加 “ Order By ”，返回的数据是不确定的<br>这种问题碰到不止几次了。追根寻底， Select 语句如果不加 “ Order By ”， MySQL 会怎么排序呢？</p><ul><li>不能依赖 MySQL 的默认排序</li><li>如果你想排序，总是加上 Order By</li><li>GROUP BY 强加了 Order By （这与标准语法冲突，如果要避免，请使用 ORDER BY NULL ）这里我有疑问，到底强加了何种 Order by<br>对于 MyISAM 表<br>MySQL Select 默认排序是按照物理存储顺序显示的。（不进行额外排序）.也就是说SELECT * FROM tabl – 会产生“表扫描”。如果表没有删除、替换、更新操作，记录会显示为插入的顺序。<br>对于 InnoDB 表<br>同样的情况，会按主键的顺序排列。再次强调，这只是潜规则（artifact of the underlying implementation：怎么翻译？），不靠谱的。<br>理解与推测<br>“ Select ” 不加 “ Order by ”时， MySQL 会尝试以尽可能快的方法（ MySQL 实际的方法不见得快）返回数据。由于访问主键、索引大多数情况会快一些（在 Cache 里）所以返回的数据有可能以主键、索引的顺序输出，<br>这里并不会真的进行排序，主要是由于主键、索引本身就是排序放到内存的，所以连续输出时可能是某种序列。<br>在一些情况下消耗硬盘寻道时间最短的数据会先返回。如果只查询单个表，在特殊的情况下是有规律的。<br>最后总结：<br>“Order By 是要加的”<br><a href="https://blog.csdn.net/caomiao2006/article/details/52144949">https://blog.csdn.net/caomiao2006/article/details/52144949</a></li></ul><center>关于 ORDER BY关键字</center>### 一、 ORDER BY 返回的是游标而不是集合<p>SQL 的理论其实是集合论，常见的类似求数据的交集、并集、差集都可以使用集合的思维来求解。集合中的行之间没有预先定义的顺序，它只是成员的一种逻辑组合，成员之间的顺序无关紧要。如下图，每一个括号里的内容就是一条记录，在没排序前，他们都是随机分布在集合中。<br>Student(ID,Name,Age)</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/20220407110418.png?raw=true" alt="20220407110418.png"></p><center>Student集合</center><p>但是对于带有排序作用的 ORDER BY 子句的查询，它返回的是一个对象，其中的行按特定的顺序组织在一起，我们把这种对象称为游标。<br>如下图，经过对 Student 表的 ID 进行 ORDER BY 排序后， Student 表变成了有序对象，也就是我们上面说的游标。<br>Student(ID,Name,Age)</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/20220407111256.png?raw=true" alt="20220407111256.png"></p><center>Student对象</center><h3 id="二、ORDER-BY-子句是唯一能重用列别名的一步"><a href="#二、ORDER-BY-子句是唯一能重用列别名的一步" class="headerlink" title="二、ORDER BY 子句是唯一能重用列别名的一步"></a>二、ORDER BY 子句是唯一能重用列别名的一步</h3><p>这里涉及 SQL 语句的语法顺序和执行顺序了，我们常见的 SQL 语法顺序如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">DISTINCT</span> </span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">column</span><span class="operator">-</span>list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line"><span class="operator">&lt;</span>left_table<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>join_type<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">JOIN</span> </span><br><span class="line"><span class="operator">&lt;</span>right_table<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line"><span class="operator">&lt;</span>join_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line"><span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line"><span class="operator">&lt;</span>group_by_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">HAVING</span> </span><br><span class="line"><span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line"><span class="operator">&lt;</span>order_by_list<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>而数据库引擎在执行 SQL 语句并不是从 SELECT 开始执行，而是从 FROM 开始，具体执行顺序如下(关键字前面的数字代表 SQL 执行的顺序步骤)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">8</span>)<span class="keyword">SELECT</span> (<span class="number">9</span>)<span class="keyword">DISTINCT</span>  (<span class="number">11</span>)<span class="operator">&lt;</span>Top Num<span class="operator">&gt;</span> <span class="operator">&lt;</span><span class="keyword">select</span> list<span class="operator">&gt;</span>  </span><br><span class="line">(<span class="number">1</span>)<span class="keyword">FROM</span> <span class="operator">&lt;</span>left_table<span class="operator">&gt;</span>  </span><br><span class="line">(<span class="number">3</span>)<span class="operator">&lt;</span>join_type<span class="operator">&gt;</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>right_table<span class="operator">&gt;</span> </span><br><span class="line">(<span class="number">2</span>)<span class="keyword">ON</span>  <span class="operator">&lt;</span>join_condition<span class="operator">&gt;</span> </span><br><span class="line">(<span class="number">4</span>)<span class="keyword">WHERE</span> <span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span> </span><br><span class="line">(<span class="number">5</span>)<span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>group_by_list<span class="operator">&gt;</span> </span><br><span class="line">(<span class="number">6</span>)<span class="keyword">WITH</span> <span class="operator">&lt;</span><span class="keyword">CUBE</span> <span class="operator">|</span> <span class="keyword">RollUP</span><span class="operator">&gt;</span> </span><br><span class="line">(<span class="number">7</span>)<span class="keyword">HAVING</span> <span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span> </span><br><span class="line">(<span class="number">10</span>)<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>order_by_list<span class="operator">&gt;</span> </span><br></pre></td></tr></table></figure><p>从上面可以看到 SELECT 在 HAVING 后才开始执行，这个时候 SELECT 后面列的别名只对后续的步骤生效，而对 SELECT 前面的步骤是无效的。所以如果你在 WHERE ， GROUP BY ，或 HAVING 后面使用列的别名均会报错。<br>我们举例测试一下。</p><p>示例表 Customers 结构及数据如下：</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/20220407111352.png?raw=true" alt="20220407111352.png"></p><h4 id="1、-WHERE-后面不使用别名的情况"><a href="#1、-WHERE-后面不使用别名的情况" class="headerlink" title="1、 WHERE 后面不使用别名的情况"></a>1、 WHERE 后面不使用别名的情况</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">姓名 <span class="keyword">AS</span> Name, </span><br><span class="line">地址 <span class="keyword">AS</span> Address, </span><br><span class="line">城市 <span class="keyword">AS</span> City </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">WHERE</span> 城市<span class="operator">=</span><span class="string">&#x27;广州&#x27;</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/20220407111448.png?raw=true" alt="20220407111448.png"></p><h4 id="2、-WHERE-后面使用列别名的情况"><a href="#2、-WHERE-后面使用列别名的情况" class="headerlink" title="2、 WHERE 后面使用列别名的情况"></a>2、 WHERE 后面使用列别名的情况</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">姓名 <span class="keyword">AS</span> Name, </span><br><span class="line">地址 <span class="keyword">AS</span> Address, </span><br><span class="line">城市 <span class="keyword">AS</span> City </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">WHERE</span> City<span class="operator">=</span><span class="string">&#x27;广州&#x27;</span></span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/20220407111512.png?raw=true" alt="20220407111512.png"></p><p>从返回的消息中我们可以看到，重命名后的 City 并不能被 WHERE 识别，所以才会报“列名’ City ‘无效”的提示。<br>其他关键字大家也可以使用上述方法进行测试，下面我们测试 GROUP BY 和 HAVING 后面使用列别名的情况。</p><h4 id="3、测试-GROUP-BY-后使用列别名"><a href="#3、测试-GROUP-BY-后使用列别名" class="headerlink" title="3、测试 GROUP BY 后使用列别名"></a>3、测试 GROUP BY 后使用列别名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">城市 <span class="keyword">AS</span> City </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> City</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/20220407111540.png?raw=true" alt="20220407111540.png"></p><h4 id="4、测试-HAVING-后使用列别名"><a href="#4、测试-HAVING-后使用列别名" class="headerlink" title="4、测试 HAVING 后使用列别名"></a>4、测试 HAVING 后使用列别名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">城市 <span class="keyword">AS</span> City </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 城市 </span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(City) <span class="operator">&gt;</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="5、测试-ORDER-BY-后面使用列别名"><a href="#5、测试-ORDER-BY-后面使用列别名" class="headerlink" title="5、测试 ORDER BY 后面使用列别名"></a>5、测试 ORDER BY 后面使用列别名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">姓名 <span class="keyword">AS</span> Name, </span><br><span class="line">地址 <span class="keyword">AS</span> Address, </span><br><span class="line">城市 <span class="keyword">AS</span> City </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> City</span><br></pre></td></tr></table></figure><p>结果如下：</p><p> <img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/20220407111622.png?raw=true" alt="20220407111622.png"></p><p>从上面的几个测试示例的结果中，可以得出我们的结论是正确的： ORDER BY 子句是唯一能重用列别名的一步。</p><h3 id="三、谨慎使用-ORDER-BY-后面接数字的方式来进行排序"><a href="#三、谨慎使用-ORDER-BY-后面接数字的方式来进行排序" class="headerlink" title="三、谨慎使用 ORDER BY 后面接数字的方式来进行排序"></a>三、谨慎使用 ORDER BY 后面接数字的方式来进行排序</h3><p>有些小伙伴为了图省事，喜欢在 ORDER BY 后面写数字，具体示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">姓名 <span class="keyword">AS</span> Name, </span><br><span class="line">地址 <span class="keyword">AS</span> Address, </span><br><span class="line">城市 <span class="keyword">AS</span> City </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/20220407111701.png?raw=true" alt="20220407111701.png"></p><p>这样写的结果，针对当前的查询是正确没有问题的， ORDER BY 后面的数字1,2,3分别代表 SELECT 后面的第1，第2，第3个字段(也就是 Name， Address ， City)。<br>可是当查询的列发生改变，忘了修改 ORDER BY 列表。特别是当查询语句很长时，要找到 ORDER BY 与 SELECT 列表中的哪个列相对应会非常困难。<br>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">客户ID <span class="keyword">AS</span> ID, </span><br><span class="line">姓名 <span class="keyword">AS</span> Name, </span><br><span class="line">地址 <span class="keyword">AS</span> Address, </span><br><span class="line">城市 <span class="keyword">AS</span> City </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><p>由于增加了一列“客户 ID ”，原本的题意还是对 Name ， Address ， City 排序，但是因为使用了 ORDER BY 加数字，排序后的结果如下：</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/20220407111731.png?raw=true" alt="20220407111731.png"></p><p>得到的结果并不是我们想要的，所以请慎用 ORDER BY 加数字，尽量使用 ORDER BY 加列名或列别名。</p><h3 id="四、表达式不能使用-ORDER-BY-排序"><a href="#四、表达式不能使用-ORDER-BY-排序" class="headerlink" title="四、表达式不能使用 ORDER BY 排序"></a>四、表达式不能使用 ORDER BY 排序</h3><p>表表达式包括视图，内联表值函数，派生表(子查询)和公用表表达式( CTE )。<br>例如下面的视图是无效的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> V_Customers <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">客户ID <span class="keyword">AS</span> ID, </span><br><span class="line">姓名 <span class="keyword">AS</span> Name, </span><br><span class="line">地址 <span class="keyword">AS</span> Address, </span><br><span class="line">城市 <span class="keyword">AS</span> City </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ID,Name,Address</span><br></pre></td></tr></table></figure><p>结果如下：</p><p> <img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/20220407111756.png?raw=true" alt="20220407111756.png"></p><p>这个错误是不是很熟悉？因为很多小伙伴经常喜欢在视图或子查询里面加 ORDER BY ，然后一执行就会报这个错。<br>根本原因不敢妄加断定，因为搜寻了很多文献资料也没给出一个具体的说法。<br>这里猜测是因为视图，内联表值函数，派生表(子查询)和公用表表达式( CTE )等返回的结果还需要进一步的去使用，加了 ORDER BY 进行排序是多此一举，反而会浪费系统资源。所以数据库的开发者不希望大家使用这样不规范操作。<br>所以下次就不要在表表达式里添加 ORDER BY 了。</p><h3 id="五、-T-SQL-中表表达式加了-TOP-可以使用-ORDER-BY"><a href="#五、-T-SQL-中表表达式加了-TOP-可以使用-ORDER-BY" class="headerlink" title="五、 T-SQL 中表表达式加了 TOP 可以使用 ORDER BY"></a>五、 T-SQL 中表表达式加了 TOP 可以使用 ORDER BY</h3><p>我们从第四点的报错信息中可以看到：在另外还指定了 TOP 、 OFFSET  或 FOR XML 是可以使用 ORDER BY 的。</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/20220407111819.png?raw=true" alt="20220407111819.png"></p><p>这又是为什么呢？<br>我们还是先举个栗子给大家看一下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">客户ID <span class="keyword">AS</span> ID, </span><br><span class="line">姓名 <span class="keyword">AS</span> Name, </span><br><span class="line">地址 <span class="keyword">AS</span> Address, </span><br><span class="line">城市 <span class="keyword">AS</span> City </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">(<span class="keyword">SELECT</span> TOP <span class="number">3</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 城市) Customers </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ID,Name,Address</span><br></pre></td></tr></table></figure><p>因为 T-SQL 中带有 ORDER BY 的表表达式加了 TOP 后返回的是一个没有固定顺序的表。因此，在这种情况下， ORDER BY 子句只是为 TOP 选项定义逻辑顺序，就是下面这个逻辑子句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">3</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 城市 </span><br></pre></td></tr></table></figure><p>结果如下：</p><p> <img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/20220407111904.png?raw=true" alt="20220407111904.png"></p><p>而不保证结果集的排列顺序，因为表表达式外面至少还有一层才是我们最终需要的结果集。<br>这里的 ORDER BY 只对当前的子查询生效，到了主查询是不起作用的。必须在主查询末尾继续添加一个 ORDER BY 子句才能对结果集生效，就像我们例子中写的那样。<br>除非逻辑要求，一般情况下并不推荐大家这样巧妙的避开子查询中不能使用 ORDER BY 的限制。</p><p><a href="https://database.51cto.com/art/201912/608333.htm">https://database.51cto.com/art/201912/608333.htm</a></p><h2 id="SQL-常用关键字"><a href="#SQL-常用关键字" class="headerlink" title="SQL 常用关键字"></a>SQL 常用关键字</h2><h3 id="select"><a href="#select" class="headerlink" title="select * :"></a>select * :</h3><p>​返回所有记录</p><h3 id="limit-N"><a href="#limit-N" class="headerlink" title="limit N :"></a>limit N :</h3><p>返回 N 条记录</p><h3 id="offset-M"><a href="#offset-M" class="headerlink" title="offset M :"></a>offset M :</h3><p>跳过 M 条记录, 默认 M&#x3D;0, 单独使用似乎不起作用</p><h3 id="limit-N-M"><a href="#limit-N-M" class="headerlink" title="limit N,M :"></a>limit N,M :</h3><p>相当于 limit M offset N , 从第 N 条记录开始, 返回 M 条记录</p><h3 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY :"></a>ORDER BY :</h3><p>释：该关键字用于对结果集按照一列或者多个列进行排序<br>该关键字默认按照升序对记录进行排序。如果需要按照降序对记录进行排序，可以在 SQL 后添加 DESC 关键字</p><h3 id="SELECT-DISTINCT"><a href="#SELECT-DISTINCT" class="headerlink" title="SELECT DISTINCT :"></a>SELECT DISTINCT :</h3><p>在表中，一个列可能会包含多个重复值，有时也许希望仅仅列出不同（ distinct ）的值。<br> DISTINCT 关键词用于返回唯一不同的值。<br>使用该关键字必须指定<column-name> 并且必须要紧跟在 SELECT 关键字之后<br>例：<br><code>SELECT DISTINCT &lt;column_name&gt; FROM &lt;table_name&gt;</code></p><h3 id="SQL-Aggregate函数"><a href="#SQL-Aggregate函数" class="headerlink" title="SQL Aggregate函数 :"></a>SQL Aggregate函数 :</h3><p><strong>SQL Aggregate 函数计算从列中取得的值，返回一个单一的值。</strong><br><strong>有用的 Aggregate 函数：</strong></p><h4 id="•AVG-返回平均值"><a href="#•AVG-返回平均值" class="headerlink" title="•AVG() - 返回平均值"></a>•AVG() - 返回平均值</h4><h4 id="•COUNT-返回行数"><a href="#•COUNT-返回行数" class="headerlink" title="•COUNT() - 返回行数"></a>•COUNT() - 返回行数</h4><h4 id="•FIRST-返回第一个记录的值"><a href="#•FIRST-返回第一个记录的值" class="headerlink" title="•FIRST() - 返回第一个记录的值"></a>•FIRST() - 返回第一个记录的值</h4><h4 id="•LAST-返回最后一个记录的值"><a href="#•LAST-返回最后一个记录的值" class="headerlink" title="•LAST() - 返回最后一个记录的值"></a>•LAST() - 返回最后一个记录的值</h4><h4 id="•MAX-返回最大值"><a href="#•MAX-返回最大值" class="headerlink" title="•MAX() - 返回最大值"></a>•MAX() - 返回最大值</h4><h4 id="•MIN-返回最小值"><a href="#•MIN-返回最小值" class="headerlink" title="•MIN() - 返回最小值"></a>•MIN() - 返回最小值</h4><h4 id="•SUM-返回总和"><a href="#•SUM-返回总和" class="headerlink" title="•SUM() - 返回总和"></a>•SUM() - 返回总和</h4><h3 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE :"></a>WHERE :</h3><p>子句用于提取那些满足指定条件的记录。<br>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>column_name<span class="operator">&gt;</span>,<span class="operator">&lt;</span>column_name<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="operator">&lt;</span>column_name<span class="operator">&gt;</span> <span class="operator">&lt;</span>operator<span class="operator">&gt;</span> <span class="operator">&lt;</span><span class="keyword">value</span><span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p><a href="https://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins">https://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins</a></p><center>SQL百题(牛客)</center><p><img src="https://www.runoob.com/wp-content/uploads/2019/01/sql-join.png" alt="img"></p><h1 id="SQL1-查找最晚入职员工"><a href="#SQL1-查找最晚入职员工" class="headerlink" title="SQL1 查找最晚入职员工"></a>SQL1 查找最晚入职员工</h1><p><a href="https://www.nowcoder.com/practice/218ae58dfdcd4af195fff264e062138f">https://www.nowcoder.com/practice/218ae58dfdcd4af195fff264e062138f</a></p><p>题解：<br>最晚入职的员工可能会有多人<br>我们使用集合的思想解题就是：查出整张表与整表的 hire_date 字段的最大值的交集<br>即:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees </span><br><span class="line"><span class="keyword">where</span> hire_date <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(hire_date) <span class="keyword">from</span> employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="SQL2-查找入职员工时间排名倒数第三的员工所有信息"><a href="#SQL2-查找入职员工时间排名倒数第三的员工所有信息" class="headerlink" title="SQL2 查找入职员工时间排名倒数第三的员工所有信息"></a>SQL2 查找入职员工时间排名倒数第三的员工所有信息</h1><p><a href="https://www.nowcoder.com/practice/ec1ca44c62c14ceb990c3c40def1ec6c">https://www.nowcoder.com/practice/ec1ca44c62c14ceb990c3c40def1ec6c</a></p><p>题解<br>查入职员工表，通过where过滤时间，所以还要使用子查询查出时间排名倒数第三的员工；但是时间倒数第三的员工可能不止一个，通过 <code>DISTINCT</code> 关键字过滤掉重复出现的时间。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> hire_date <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> hire_date <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> hire_date <span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date <span class="keyword">DESC</span> limit <span class="number">2</span>,<span class="number">1</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> hire_date <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> hire_date <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date <span class="keyword">DESC</span> limit <span class="number">2</span>,<span class="number">1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="SQL3-查找当前薪水详情以及部门编号-dept-no"><a href="#SQL3-查找当前薪水详情以及部门编号-dept-no" class="headerlink" title="SQL3 查找当前薪水详情以及部门编号 dept_no"></a>SQL3 查找当前薪水详情以及部门编号 dept_no</h1><p><a href="https://www.nowcoder.com/practice/c63c5b54d86e4c6d880e4834bfd70c3b">https://www.nowcoder.com/practice/c63c5b54d86e4c6d880e4834bfd70c3b</a></p><p>题解<br>入职时间相同的员工可能有多人</p>]]></content>
      
      
      <categories>
          
          <category> 心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 从安装到使用的常用命令</title>
      <link href="/2022/03/21/docker-%E4%BB%8E%E5%AE%89%E8%A3%85%E5%88%B0%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/03/21/docker-%E4%BB%8E%E5%AE%89%E8%A3%85%E5%88%B0%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="tip"><a href="#tip" class="headerlink" title="tip:"></a>tip:</h3><ul><li>本文将介绍如何在 Debian 11 和 CentOS7 下安装 Docker 以及 Docker Compose。</li><li>本文同时适用于 Debian 11、 Debian 10 Buster、Ubuntu 20.04 Focal 以及 Ubuntu 18.04 Bionic*</li><li>以下操作需要在 root 用户下完成，请使用 sudo -i 或 su root 切换到 root 用户进行操作。</li><li>如果想要查询 Docker 镜像的详细版本请前往 Docker hub 官网: </li><li><a href="https://hub.docker.com/search?q=">https://hub.docker.com/search?q=</a></li><li>部分资料来源 <a href="https://u.sb/debian-install-docker/">烧饼博客</a> 感谢 @<a href="https://u.sb/">Showfom</a> 大佬</li></ul><h2 id="什么是-Docker？"><a href="#什么是-Docker？" class="headerlink" title="什么是 Docker？"></a>什么是 Docker？</h2><hr><p>Docker 是一种容器化技术，可以在服务器上快速搭建容器并在不污染宿主机的情况下运行软件，而不再需要安装配置各种环境。开源 <a href="https://www.docker.com/">Docker 社区</a>致力于改进这类技术，并免费提供给所有用户，使之获益。</p><h2 id="什么是-Docker-Compose？"><a href="#什么是-Docker-Compose？" class="headerlink" title="什么是 Docker Compose？"></a>什么是 Docker Compose？</h2><hr><p>传统模式下运维人员需要运行 <code>docker run</code> 来启动各种容器，一旦容器过多，就无法一次性记住所有的运行参数和命令，这时候我们可以使用 <a href="https://docs.docker.com/compose/">Docker Compose</a> 来解决这个问题。</p><p>Docker Compose 是一种工具，用于帮助定义和共享多容器应用程序。 通过 Compose，你可以创建 YAML 文件来定义服务，并且只需一个命令，就可以启动或清理所有内容。使用 Compose 的巨大优点是，你可以在文件中定义应用程序堆栈，使其位于项目存储库的根目录下（它现在受版本控制），并方便其他人参与你的项目。 其他人只需克隆你的存储库即可开始撰写应用。 事实上，你可能会看到 GitHub&#x2F;GitLab 上的很多项目现在都是这样做的。(via <a href="https://docs.microsoft.com/zh-cn/visualstudio/docker/tutorials/use-docker-compose">使用 Docker Compose</a>)</p><h2 id="CentOS7-安装-Docker"><a href="#CentOS7-安装-Docker" class="headerlink" title="CentOS7 安装 Docker"></a>CentOS7 安装 Docker</h2><hr><h3 id="清理-CentOS7-自带-Docker-版本"><a href="#清理-CentOS7-自带-Docker-版本" class="headerlink" title="清理 CentOS7 自带 Docker 版本"></a>清理 CentOS7 自带 Docker 版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-engine</span><br></pre></td></tr></table></figure><h3 id="CentOS7-安装-Docker-所需依赖"><a href="#CentOS7-安装-Docker-所需依赖" class="headerlink" title="CentOS7 安装 Docker 所需依赖"></a>CentOS7 安装 Docker 所需依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h3 id="CentOS7-安装-Docker-ce-源"><a href="#CentOS7-安装-Docker-ce-源" class="headerlink" title="CentOS7 安装 Docker-ce 源"></a>CentOS7 安装 Docker-ce 源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">--add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="CentOS7-更新缓存-Yum-缓存"><a href="#CentOS7-更新缓存-Yum-缓存" class="headerlink" title="CentOS7 更新缓存 Yum 缓存"></a>CentOS7 更新缓存 Yum 缓存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><h3 id="CetnOS7-下载-Docker"><a href="#CetnOS7-下载-Docker" class="headerlink" title="CetnOS7 下载 Docker"></a>CetnOS7 下载 Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><h2 id="Debian-11-安装"><a href="#Debian-11-安装" class="headerlink" title="Debian 11 安装"></a>Debian 11 安装</h2><h3 id="Debian-11-安装-Docker-所需要的依赖"><a href="#Debian-11-安装-Docker-所需要的依赖" class="headerlink" title="Debian 11 安装 Docker 所需要的依赖"></a>Debian 11 安装 Docker 所需要的依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade -y</span><br><span class="line">apt install curl vim wget gnupg dpkg apt-transport-https lsb-release ca-certificates</span><br></pre></td></tr></table></figure><h3 id="然后加入-Docker-的-GPG-公钥和-apt-源："><a href="#然后加入-Docker-的-GPG-公钥和-apt-源：" class="headerlink" title="然后加入 Docker 的 GPG 公钥和 apt 源："></a>然后加入 Docker 的 GPG 公钥和 apt 源：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://download.docker.com/linux/debian/gpg | gpg --dearmor &gt; /usr/share/keyrings/docker-ce.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-ce.gpg] https://download.docker.com/linux/debian <span class="subst">$(lsb_release -sc)</span> stable&quot;</span> &gt; /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure><h3 id="国内机器可以用清华-TUNA的国内源："><a href="#国内机器可以用清华-TUNA的国内源：" class="headerlink" title="国内机器可以用清华 TUNA的国内源："></a>国内机器可以用<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华 TUNA</a>的国内源：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://download.docker.com/linux/debian/gpg | gpg --dearmor &gt; /usr/share/keyrings/docker-ce.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-ce.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian <span class="subst">$(lsb_release -sc)</span> stable&quot;</span> &gt; /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure><h3 id="然后更新系统后即可安装-Docker-CE："><a href="#然后更新系统后即可安装-Docker-CE：" class="headerlink" title="然后更新系统后即可安装 Docker CE："></a>然后更新系统后即可安装 Docker CE：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h2 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h2><p>我们可以使用 Docker 官方发布的 <a href="https://github.com/docker/compose">Github</a> 直接安装最新版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-x86_64 &gt; /usr/local/bin/docker-compose</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>此时可以使用 <code>docker-compose version</code> 命令检查是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@debian ~ <span class="comment"># docker-compose version</span></span><br><span class="line">Docker Compose version v2.6.1</span><br></pre></td></tr></table></figure><h2 id="查看-Docker-版本并启动-Docker-服务"><a href="#查看-Docker-版本并启动-Docker-服务" class="headerlink" title="查看 Docker 版本并启动 Docker 服务"></a>查看 Docker 版本并启动 Docker 服务</h2><p>此时可以使用 <code>docker version</code> 命令检查是否安装成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@server nginx]# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.17</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.17.11</span><br><span class="line"> Git commit:        100c701</span><br><span class="line"> Built:             Mon Jun  6 23:05:12 2022</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      true</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.17</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.17.11</span><br><span class="line">  Git commit:       a89b842</span><br><span class="line">  Built:            Mon Jun  6 23:03:33 2022</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.6</span><br><span class="line">  GitCommit:        10c12954828e7c7c9b6e0ea9b0c02b01407d3ae1</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.2</span><br><span class="line">  GitCommit:        v1.1.2-0-ga916309</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure><p>出现上述打印时，代表 Docker 已经安装成功。</p><p>现在你可以使用 <code>systemctl start docker</code> 启动 Docker 服务，使用 <code>systemctl status docke</code>r查看 Docker 状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@server nginx]<span class="comment"># systemctl status docker</span></span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2022-06-20 14:20:41 CST; 2 months 23 days ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line"> Main PID: 2823 (dockerd)</span><br><span class="line">    Tasks: 9</span><br><span class="line">   Memory: 129.1M</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           └─2823 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line">Jul 04 16:47:02 server dockerd[2823]: time=<span class="string">&quot;2022-07-04T16:47:02.754108737+08:00&quot;</span> level=info msg=<span class="string">&quot;ignoring event&quot;</span> container=9e2...Delete<span class="string">&quot;</span></span><br><span class="line"><span class="string">Jul 04 16:47:15 server dockerd[2823]: time=&quot;</span>2022-07-04T16:47:15.664988858+08:00<span class="string">&quot; level=warning msg=&quot;</span>Published ports are discar...k mode<span class="string">&quot;</span></span><br><span class="line"><span class="string">Jul 04 16:47:15 server dockerd[2823]: time=&quot;</span>2022-07-04T16:47:15.730605349+08:00<span class="string">&quot; level=warning msg=&quot;</span>Published ports are discar...k mode<span class="string">&quot;</span></span><br><span class="line"><span class="string">Jul 04 16:47:59 server dockerd[2823]: time=&quot;</span>2022-07-04T16:47:59.644912415+08:00<span class="string">&quot; level=info msg=&quot;</span>ignoring event<span class="string">&quot; container=dd4...Delete&quot;</span></span><br><span class="line">Jul 05 11:29:47 server dockerd[2823]: time=<span class="string">&quot;2022-07-05T11:29:47.355243389+08:00&quot;</span> level=info msg=<span class="string">&quot;ignoring event&quot;</span> container=1b3...Delete<span class="string">&quot;</span></span><br><span class="line"><span class="string">Jul 05 14:57:13 server dockerd[2823]: time=&quot;</span>2022-07-05T14:57:13.380661904+08:00<span class="string">&quot; level=info msg=&quot;</span>ignoring event<span class="string">&quot; container=246...Delete&quot;</span></span><br><span class="line">Jul 05 15:22:38 server dockerd[2823]: time=<span class="string">&quot;2022-07-05T15:22:38.315766291+08:00&quot;</span> level=info msg=<span class="string">&quot;ignoring event&quot;</span> container=246...Delete<span class="string">&quot;</span></span><br><span class="line"><span class="string">Jul 05 15:27:11 server dockerd[2823]: time=&quot;</span>2022-07-05T15:27:11.962833484+08:00<span class="string">&quot; level=info msg=&quot;</span>ignoring event<span class="string">&quot; container=530...Delete&quot;</span></span><br><span class="line">Jul 31 00:09:12 server dockerd[2823]: time=<span class="string">&quot;2022-07-31T00:09:12.408910765+08:00&quot;</span> level=info msg=<span class="string">&quot;ignoring event&quot;</span> container=530...Delete<span class="string">&quot;</span></span><br><span class="line"><span class="string">Jul 31 00:09:20 server dockerd[2823]: time=&quot;</span>2022-07-31T00:09:20.743421203+08:00<span class="string">&quot; level=info msg=&quot;</span>ignoring event<span class="string">&quot; container=422...Delete&quot;</span></span><br><span class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查看-Docker-镜像"><a href="#查看-Docker-镜像" class="headerlink" title="查看 Docker 镜像"></a>查看 Docker 镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker images -qa</span><br><span class="line">docker images --digests</span><br></pre></td></tr></table></figure><h2 id="设置-Docker-镜像源加速-中科大镜像源"><a href="#设置-Docker-镜像源加速-中科大镜像源" class="headerlink" title="设置 Docker 镜像源加速 (中科大镜像源)"></a>设置 Docker 镜像源加速 (中科大镜像源)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/docker</span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;,</span><br><span class="line">    &quot;https://docker.nju.edu.cn/&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="重启-Docker-使其配置生效"><a href="#重启-Docker-使其配置生效" class="headerlink" title="重启 Docker 使其配置生效"></a>重启 Docker 使其配置生效</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="查看-Docker-的-GitHub-列表目录"><a href="#查看-Docker-的-GitHub-列表目录" class="headerlink" title="查看 Docker 的 GitHub 列表目录"></a>查看 Docker 的 GitHub 列表目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker search [想查看的Docker应用]</span><br><span class="line">例：</span><br><span class="line">[root@server ~]# docker search python</span><br><span class="line">  NAME                                     DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">  python                                   Python is an interpreted, interactive, objec…   7701      [OK]       </span><br><span class="line">  pypy                                     PyPy is a fast, compliant alternative implem…   330       [OK]       </span><br><span class="line">  circleci/python                          Python is an interpreted, interactive, objec…   51                   </span><br><span class="line">  hylang                                   Hy is a Lisp dialect that translates express…   45        [OK]       </span><br><span class="line">  bitnami/python                           Bitnami Python Docker Image                     22                   [OK]</span><br><span class="line">  cimg/python                                                                              5                    </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h2><h4 id="查看-Docker-镜像源"><a href="#查看-Docker-镜像源" class="headerlink" title="查看 Docker 镜像源"></a>查看 Docker 镜像源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker images -qa</span><br><span class="line">docker images --digests</span><br></pre></td></tr></table></figure><p>拉取 Docker 镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull &lt;镜像名&gt;</span><br></pre></td></tr></table></figure><p>运行 Docker 镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动并进入镜像</span></span><br><span class="line"><span class="comment"># -i,-t 两个参数推荐一起使用</span></span><br><span class="line">docker run -it [CONTAINER ID]</span><br><span class="line"><span class="comment"># 后台运行，不进入镜像</span></span><br><span class="line"><span class="comment"># -d 参数表示后台运行</span></span><br><span class="line">docker run -itd [CONTAINER ID]</span><br><span class="line"><span class="comment"># --name 该参数将会给你启动的镜像设置一个别名</span></span><br><span class="line">docker run -itd --name [别名] [CONTAINER ID]</span><br></pre></td></tr></table></figure><p>如果进去了镜像，想要退出：</p><p>控制输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器停止退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>如果只想退出，容器继续运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器不停止退出</span></span><br><span class="line">CTRL+P+Q</span><br></pre></td></tr></table></figure><h2 id="MongoDB的docker-compose-yml"><a href="#MongoDB的docker-compose-yml" class="headerlink" title="MongoDB的docker-compose.yml"></a>MongoDB的docker-compose.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mongodb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data/db</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;27017:27017&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>在Docker容器中运行MongoDB数据库时，通常不需要指定command: [–auth]参数。这是因为，在MongoDB 3.0以后的版本中，认证功能是默认启用的。也就是说，只要在MongoDB数据库中创建了用户，就必须使用用户名和密码来进行连接。</p><p>如果在Docker容器中运行的是MongoDB 3.0之前的版本，则可能需要指定command: [–auth]参数，才能启用认证功能。例如，可以使用如下的内容作为docker-compose.yml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mongodb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:3.6</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data/db</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;27017:27017&quot;</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">--auth</span>]</span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="number">12345</span></span><br></pre></td></tr></table></figure><h2 id="MySQL的docker-compose-yml"><a href="#MySQL的docker-compose-yml" class="headerlink" title="MySQL的docker-compose.yml"></a>MySQL的docker-compose.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">password</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">my_db</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql-data:/var/lib/mysql-data&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Redis的docker-compose-yml"><a href="#Redis的docker-compose-yml" class="headerlink" title="Redis的docker-compose.yml"></a>Redis的docker-compose.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">REDIS_PASSWORD:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./redis:/data&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="string">-a</span> <span class="string">&lt;password&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h2><p>要推送Docker镜像到Docker Hub，需要按照以下步骤进行操作：</p><ol><li>登录Docker Hub，使用您的用户名和密码进行登录。</li><li>在Docker Hub上创建一个新的仓库，用于存储您的镜像。</li><li>在终端中运行以下命令，将镜像标记为您的Docker Hub用户名和仓库名：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker tag &lt;image&gt; &lt;your_username&gt;/&lt;repository_name&gt;:&lt;tag&gt;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker tag my_image username/my_repo:latest</span></span><br></pre></td></tr></table></figure><ol><li>运行以下命令，推送标记的镜像到Docker Hub：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker push &lt;your_username&gt;/&lt;repository_name&gt;:&lt;tag&gt;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker push username/my_repo:latest</span></span><br></pre></td></tr></table></figure><p>在这些命令完成后，您的镜像就会被推送到Docker Hub，并可以供其他用户使用。</p>]]></content>
      
      
      <categories>
          
          <category> 常用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 编译安装</title>
      <link href="/2022/03/20/Nginx-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
      <url>/2022/03/20/Nginx-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>本文将介绍如何在 Debian 11 和 CentOS7 下编译安装 Nginx<br>PS: 本文同时适用于 Debian 11、 Debian 10 Buster、Ubuntu 20.04 Focal 以及 Ubuntu 18.04 Bionic*</p><h1 id="安装约定"><a href="#安装约定" class="headerlink" title="安装约定:"></a>安装约定:</h1><ul><li><p>Nginx的安装目录为:  &#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx</p></li><li><p>Nginx的安装包目录为: &#x2F;opt&#x2F;</p></li></ul><h1 id="检查安装环境"><a href="#检查安装环境" class="headerlink" title="检查安装环境"></a>检查安装环境</h1><ul><li><p>我们在安装不同的工具软件的时候，需要安装插件的环境关系</p><p>​检查系统版本：<code>cat /etc/redhat-release</code></p><p>​查看是否已安装<code>wget: rpm -qa|wget</code></p><p>​(注： Linux 系统中的 wget 是一个下载文件的工具)</p></li><li><p>​否则（结果显示空白）安装：<code>yum -y install wget</code></p><p>​安装 g 编译器：默认的云服务器都是会安装的。</p><p>​查看是否已安装编译器：<code>rpm -qa|gcc</code></p><p>​否则（结果显示空白）安装：<code>yum -y install gcc gcc-c++</code></p></li><li><p>为什么要装 gcc 编译器？</p><p>​gcc 是 C 语言编译器<br>​而我们的 nginx 的编码语言就是 C 语言</p><p>​使用 gcc 编译器可以编译语言代码为可执行程序</p></li></ul><h1 id="安装-nginx-依赖"><a href="#安装-nginx-依赖" class="headerlink" title="安装 nginx 依赖"></a>安装 nginx 依赖</h1><h2 id="1-nginx-的-Rewrite-模块和-HTTP-核心模块会使用到-PRE-正则表达式语法"><a href="#1-nginx-的-Rewrite-模块和-HTTP-核心模块会使用到-PRE-正则表达式语法" class="headerlink" title="1. nginx 的 Rewrite 模块和 HTTP 核心模块会使用到 PRE 正则表达式语法"></a>1. nginx 的 Rewrite 模块和 HTTP 核心模块会使用到 PRE 正则表达式语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install pcre pcre-devel</span><br></pre></td></tr></table></figure><h2 id="2-nginx-的各种模块中需要使用-gzip-压缩："><a href="#2-nginx-的各种模块中需要使用-gzip-压缩：" class="headerlink" title="2. nginx 的各种模块中需要使用 gzip 压缩："></a>2. nginx 的各种模块中需要使用 gzip 压缩：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install zlib zlib-devel</span><br></pre></td></tr></table></figure><h2 id="3-安全套接字层密码库"><a href="#3-安全套接字层密码库" class="headerlink" title="3. 安全套接字层密码库"></a>3. 安全套接字层密码库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openssl openssI-devel</span><br></pre></td></tr></table></figure><h2 id="4-CentOS-全部依赖："><a href="#4-CentOS-全部依赖：" class="headerlink" title="4. CentOS 全部依赖："></a>4. CentOS 全部依赖：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc gcc-c++ make unzip pcre pcre-devel zlib zlib-devel libxml2 libxml2-devel  readline readline-devel ncurses ncurses-devel perl-devel perl-ExtUtils-Embed openssl-devel -y</span><br></pre></td></tr></table></figure><h2 id="5-Debian-全部依赖："><a href="#5-Debian-全部依赖：" class="headerlink" title="5. Debian 全部依赖："></a>5. Debian 全部依赖：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y build-essential libpcre3 libpcre3-dev zlib1g-dev openssl libssl-dev </span><br></pre></td></tr></table></figure><h1 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h1><h2 id="1-下载-nginx"><a href="#1-下载-nginx" class="headerlink" title="1. 下载 nginx"></a>1. 下载 nginx</h2><p>​wget <a href="http://nginx.org/download/nginx-1.14.0.tar.gz">http://nginx.org/download/nginx-1.14.0.tar.gz</a> 或者下载好直接上传</p><p>​解压：<code>tar-zxvf nginx-1.14.0.tar.gz</code></p><h2 id="2-解压-nginx"><a href="#2-解压-nginx" class="headerlink" title="2. 解压 nginx"></a>2. 解压 nginx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.14.0</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/20220320122137.png?raw=true" alt="20220320122137.png"></p><h3 id="使用部分配置"><a href="#使用部分配置" class="headerlink" title="使用部分配置"></a>使用部分配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/src/nginx \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-pcre --with-http_spdy_module</span><br></pre></td></tr></table></figure><h3 id="或开启大部分配置"><a href="#或开启大部分配置" class="headerlink" title="或开启大部分配置"></a>或开启大部分配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/src/nginx \</span><br><span class="line">--sbin-path=/usr/local/src/nginx/sbin/nginx \</span><br><span class="line">--conf-path=/usr/local/src/nginx/nginx.conf \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--pid-path=/var/run/nginx.pid \</span><br><span class="line">--lock-path=/var/run/nginx.lock \</span><br><span class="line">--http-client-body-temp-path=/var/cache/nginx/client_temp \</span><br><span class="line">--http-proxy-temp-path=/var/cache/nginx/proxy_temp \</span><br><span class="line">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \</span><br><span class="line">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \</span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp \</span><br><span class="line">--with-file-aio \</span><br><span class="line">--with-threads \</span><br><span class="line">--with-http_addition_module \</span><br><span class="line">--with-http_auth_request_module \</span><br><span class="line">--with-http_dav_module \</span><br><span class="line">--with-http_flv_module \</span><br><span class="line">--with-http_gunzip_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-http_mp4_module \</span><br><span class="line">--with-http_random_index_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_secure_link_module \</span><br><span class="line">--with-http_slice_module \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_sub_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-mail \</span><br><span class="line">--with-mail_ssl_module \</span><br><span class="line">--with-stream \</span><br><span class="line">--with-stream_realip_module \</span><br><span class="line">--with-stream_ssl_module \</span><br><span class="line">--with-stream_ssl_preread_module</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">编译选项官方提供的有：</span><br><span class="line">–prefix=path 定义一个目录来保存你的nginx的提供功能的文件夹，就这好比我们安装软件的时候软件存放的目录，如果我们在编译的不指定安装位置，那么默认的位置/usr/local/nginx 目录</span><br><span class="line">–sbin-path=path 设置nginx执行脚本的位置，这里如果设置在path变量里面，就可以在bash环境下，任意使用nginx命令，默认位置prefix/sbin/nginx 注意这里的prefix是</span><br><span class="line">在配置文件里面配置的路径</span><br><span class="line">–conf-path=path 配置nginx配置文件的路径，如果不指定这个选项，那么配置文件的默认路径就会是 prefix/conf/nginx.conf</span><br><span class="line">–pid-path =path 配置nginx.pid file的路径，一般来说，进程在运行的时候的时候有一个进程id，这个id会保存在pid file里面，默认的pid file的放置位置是prefix/logs/nginx.pid</span><br><span class="line">–error-log-path=path 设置错误日志的存放路径，如果不指定，就默认 prefix/logs/error.log</span><br><span class="line">–http-log-path= path 设置http访问日志的路径，如果不指定，就默认 prefix/logs/access.log</span><br><span class="line">–user=name 设置默认启动进程的用户，如果不指定，就默认 nobody</span><br><span class="line">–group=name 设置这个用户所在的用户组，如果不指定，依然是nobody</span><br><span class="line">这些是我们常用的编译选项，其他的可以均保持默认，如需特殊指定，可上nginx官网查阅 http://nginx.org/en/docs/configure.html</span><br><span class="line">下面是一些不常用的选项</span><br><span class="line">–with-http_ssl_module -开启HTTP SSL模块，使NGINX可以支持HTTPS请求。需要安装了OPENSSL</span><br><span class="line">–with-http_flv_module</span><br><span class="line">–with-http_stub_status_module - 启用 “server status” 页(可有可无)</span><br><span class="line">–without-http_gzip_module - 禁用 ngx_http_gzip_module. 如果启用，需要 zlib 。</span><br><span class="line">–without-http_ssi_module - 禁用 ngx_http_ssi_module</span><br><span class="line">–without-http_referer_module - 禁用 ngx_http_referer_module</span><br><span class="line">–without-http_rewrite_module - 禁用 ngx_http_rewrite_module. 如果启用需要 PCRE 。</span><br><span class="line">–without-http_proxy_module - 禁用 ngx_http_proxy_module</span><br><span class="line">–without-http_fastcgi_module - 禁用 ngx_http_fastcgi_module</span><br><span class="line">–without-http_memcached_module - 禁用 ngx_http_memcached_module</span><br><span class="line">–without-http_browser_module - 禁用 ngx_http_browser_module</span><br><span class="line">–http-proxy-temp-path=PATH - Set path to the http proxy temporary files</span><br><span class="line">–http-fastcgi-temp-path=PATH - Set path to the http fastcgi temporary files</span><br><span class="line">–without-http - 禁用 HTTP server（用作代理或反向代理）</span><br><span class="line">–with-mail - 启用 IMAP4/POP3/SMTP 代理模块</span><br><span class="line">–with-mail_ssl_module - 启用 ngx_mail_ssl_module</span><br><span class="line">–with-openssl=DIR - Set path to OpenSSL library sources</span><br></pre></td></tr></table></figure><h2 id="3-编译并安装"><a href="#3-编译并安装" class="headerlink" title="3. 编译并安装"></a>3. 编译并安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="4-创建并设置-nginx-运行账号（本章节是为了提高服务器的访问权限控制——可跳过，不影响个人使用）"><a href="#4-创建并设置-nginx-运行账号（本章节是为了提高服务器的访问权限控制——可跳过，不影响个人使用）" class="headerlink" title="4. 创建并设置 nginx 运行账号（本章节是为了提高服务器的访问权限控制——可跳过，不影响个人使用）"></a>4. 创建并设置 nginx 运行账号（本章节是为了提高服务器的访问权限控制——可跳过，不影响个人使用）</h2><p>   group add nginx</p><p>   user add -M -g nginx -s &#x2F;sbin&#x2F;nologin nginx（手动创建一个用户，不想让用户登录系统）</p><p>   cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx&#x2F;config</p><p>   (注: M：不要自动建立用户的登入目录。)</p><p>   s 是指定用户登入后所使用的 she11 。默认值为 &#x2F;bin&#x2F;bash 。如果不想让用户登录系统可以用 -s &#x2F;sbin&#x2F;nologin 此用户就不可以登录系统</p><h2 id="5-设置-nginx-为系统服务"><a href="#5-设置-nginx-为系统服务" class="headerlink" title="5. 设置 nginx 为系统服务"></a>5. 设置 nginx 为系统服务</h2><pre><code>  在文件夹 /lib/systemd/system 新建文件 nginx.service  文件创建：touch nginx.service  vim /lib/systemd/system/nginx.service</code></pre><p>   写入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/src/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/src/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/src/nginx/sbin/nginx -s stop</span><br><span class="line">PrivateTmp=true</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h2 id="6-启动-nginx"><a href="#6-启动-nginx" class="headerlink" title="6. 启动 nginx"></a>6. 启动 nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><p>   如果出现</p><p>   <img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/20220320124604.png?raw=true" alt="20220320124604.png"></p><p>   那么输入</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>   再重新启动 nginx 即可</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h1 id="nginx-平滑升级"><a href="#nginx-平滑升级" class="headerlink" title="nginx 平滑升级"></a>nginx 平滑升级</h1><p>tips：演示版本将会从 nginx 1.21.6 &#x3D;&gt; nginx 1.22.1</p><p>查看当前 nginx 版本(请先配置 nginx 环境变量或进入 nginx 的 sbin 目录中)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@server sbin]# nginx -V</span><br><span class="line">nginx version: nginx/1.21.6</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) </span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/src/nginx --with-http_ssl_module --with-http_stub_status_module --with-pcre --with-http_ssl_module</span><br></pre></td></tr></table></figure><p>下载、解压并进入 nginx 1.22.1 的解压目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.22.1.tar.gz</span><br><span class="line">tar -zxvf nginx-1.22.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.22.1/</span><br></pre></td></tr></table></figure><p>配置安装选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/src/nginx \</span><br><span class="line">--sbin-path=/usr/local/src/nginx/sbin/nginx \</span><br><span class="line">--conf-path=/usr/local/src/nginx/nginx.conf \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--pid-path=/usr/local/src/nginx/logs/nginx.pid \</span><br><span class="line">--lock-path=/var/run/nginx.lock \</span><br><span class="line">--http-client-body-temp-path=/var/cache/nginx/client_temp \</span><br><span class="line">--http-proxy-temp-path=/var/cache/nginx/proxy_temp \</span><br><span class="line">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \</span><br><span class="line">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \</span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp \</span><br><span class="line">--with-file-aio \</span><br><span class="line">--with-threads \</span><br><span class="line">--with-http_addition_module \</span><br><span class="line">--with-http_auth_request_module \</span><br><span class="line">--with-http_dav_module \</span><br><span class="line">--with-http_flv_module \</span><br><span class="line">--with-http_gunzip_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-http_mp4_module \</span><br><span class="line">--with-http_random_index_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_secure_link_module \</span><br><span class="line">--with-http_slice_module \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_sub_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-mail \</span><br><span class="line">--with-mail_ssl_module \</span><br><span class="line">--with-stream \</span><br><span class="line">--with-stream_realip_module \</span><br><span class="line">--with-stream_ssl_module \</span><br><span class="line">--with-stream_ssl_preread_module</span><br></pre></td></tr></table></figure><p>设置 nginx 平滑升级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@server nginx-1.22.1]<span class="comment"># make upgrade</span></span><br><span class="line">/usr/local/src/nginx/sbin/nginx -t</span><br><span class="line">nginx: the configuration file /usr/local/src/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/src/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"><span class="built_in">kill</span> -USR2 `<span class="built_in">cat</span> /usr/local/src/nginx/logs/nginx.pid`</span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"><span class="built_in">test</span> -f /usr/local/src/nginx/logs/nginx.pid.oldbin</span><br><span class="line"><span class="built_in">kill</span> -QUIT `<span class="built_in">cat</span> /usr/local/src/nginx/logs/nginx.pid.oldbin`</span><br></pre></td></tr></table></figure><p>make install 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@server nginx-1.22.1]<span class="comment"># make install</span></span><br><span class="line">make -f objs/Makefile install</span><br><span class="line">make[1]: Entering directory `/opt/nginx-1.22.1<span class="string">&#x27;</span></span><br><span class="line"><span class="string">test -d &#x27;</span>/usr/local/src/nginx<span class="string">&#x27; || mkdir -p &#x27;</span>/usr/local/src/nginx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">test -d &#x27;</span>/usr/local/src/nginx/sbin<span class="string">&#x27; \</span></span><br><span class="line"><span class="string">|| mkdir -p &#x27;</span>/usr/local/src/nginx/sbin<span class="string">&#x27;</span></span><br><span class="line"><span class="string">test ! -f &#x27;</span>/usr/local/src/nginx/sbin/nginx<span class="string">&#x27; \</span></span><br><span class="line"><span class="string">|| mv &#x27;</span>/usr/local/src/nginx/sbin/nginx<span class="string">&#x27; \</span></span><br><span class="line"><span class="string">&#x27;</span>/usr/local/src/nginx/sbin/nginx.old<span class="string">&#x27;</span></span><br><span class="line"><span class="string">cp objs/nginx &#x27;</span>/usr/local/src/nginx/sbin/nginx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">test -d &#x27;</span>/usr/local/src/nginx<span class="string">&#x27; \</span></span><br><span class="line"><span class="string">|| mkdir -p &#x27;</span>/usr/local/src/nginx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">cp conf/koi-win &#x27;</span>/usr/local/src/nginx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">cp conf/koi-utf &#x27;</span>/usr/local/src/nginx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">cp conf/win-utf &#x27;</span>/usr/local/src/nginx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">test -f &#x27;</span>/usr/local/src/nginx/mime.types<span class="string">&#x27; \</span></span><br><span class="line"><span class="string">|| cp conf/mime.types &#x27;</span>/usr/local/src/nginx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">cp conf/mime.types &#x27;</span>/usr/local/src/nginx/mime.types.default<span class="string">&#x27;</span></span><br><span class="line"><span class="string">test -f &#x27;</span>/usr/local/src/nginx/fastcgi_params<span class="string">&#x27; \</span></span><br><span class="line"><span class="string">|| cp conf/fastcgi_params &#x27;</span>/usr/local/src/nginx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">cp conf/fastcgi_params \</span></span><br><span class="line"><span class="string">&#x27;</span>/usr/local/src/nginx/fastcgi_params.default<span class="string">&#x27;</span></span><br><span class="line"><span class="string">test -f &#x27;</span>/usr/local/src/nginx/fastcgi.conf<span class="string">&#x27; \</span></span><br><span class="line"><span class="string">|| cp conf/fastcgi.conf &#x27;</span>/usr/local/src/nginx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">cp conf/fastcgi.conf &#x27;</span>/usr/local/src/nginx/fastcgi.conf.default<span class="string">&#x27;</span></span><br><span class="line"><span class="string">test -f &#x27;</span>/usr/local/src/nginx/uwsgi_params<span class="string">&#x27; \</span></span><br><span class="line"><span class="string">|| cp conf/uwsgi_params &#x27;</span>/usr/local/src/nginx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">cp conf/uwsgi_params \</span></span><br><span class="line"><span class="string">&#x27;</span>/usr/local/src/nginx/uwsgi_params.default<span class="string">&#x27;</span></span><br><span class="line"><span class="string">test -f &#x27;</span>/usr/local/src/nginx/scgi_params<span class="string">&#x27; \</span></span><br><span class="line"><span class="string">|| cp conf/scgi_params &#x27;</span>/usr/local/src/nginx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">cp conf/scgi_params \</span></span><br><span class="line"><span class="string">&#x27;</span>/usr/local/src/nginx/scgi_params.default<span class="string">&#x27;</span></span><br><span class="line"><span class="string">test -f &#x27;</span>/usr/local/src/nginx/nginx.conf<span class="string">&#x27; \</span></span><br><span class="line"><span class="string">|| cp conf/nginx.conf &#x27;</span>/usr/local/src/nginx/nginx.conf<span class="string">&#x27;</span></span><br><span class="line"><span class="string">cp conf/nginx.conf &#x27;</span>/usr/local/src/nginx/nginx.conf.default<span class="string">&#x27;</span></span><br><span class="line"><span class="string">test -d &#x27;</span>/usr/local/src/nginx/logs<span class="string">&#x27; \</span></span><br><span class="line"><span class="string">|| mkdir -p &#x27;</span>/usr/local/src/nginx/logs<span class="string">&#x27;</span></span><br><span class="line"><span class="string">test -d &#x27;</span>/var/log/nginx<span class="string">&#x27; \</span></span><br><span class="line"><span class="string">|| mkdir -p &#x27;</span>/var/log/nginx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">test -d &#x27;</span>/usr/local/src/nginx/html<span class="string">&#x27; \</span></span><br><span class="line"><span class="string">|| cp -R html &#x27;</span>/usr/local/src/nginx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">test -d &#x27;</span>/var/log/nginx<span class="string">&#x27; \</span></span><br><span class="line"><span class="string">|| mkdir -p &#x27;</span>/var/log/nginx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">make[1]: Leaving directory `/opt/nginx-1.22.1&#x27;</span></span><br></pre></td></tr></table></figure><p>查看 nginx 版本号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@server nginx]<span class="comment"># nginx -V</span></span><br><span class="line">nginx version: nginx/1.22.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) </span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/src/nginx --sbin-path=/usr/local/src/nginx/sbin/nginx --conf-path=/usr/local/src/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/usr/local/src/nginx/logs/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module</span><br></pre></td></tr></table></figure><h1 id="nginx-的-config-文件语法高亮"><a href="#nginx-的-config-文件语法高亮" class="headerlink" title="nginx 的 config 文件语法高亮"></a>nginx 的 config 文件语法高亮</h1><h2 id="1-进入-nginx-的源码文件"><a href="#1-进入-nginx-的源码文件" class="headerlink" title="1. 进入 nginx 的源码文件"></a>1. 进入 nginx 的源码文件</h2>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/nginx-1.18.0/contrib/vim/syntax</span><br></pre></td></tr></table></figure><h2 id="2-将该文件夹下的-nginx-vim-复制到-x2F-vim-x2F-syntax-x2F-文件夹下，并且在-x2F-vim-x2F-filetype-vim-文件中"><a href="#2-将该文件夹下的-nginx-vim-复制到-x2F-vim-x2F-syntax-x2F-文件夹下，并且在-x2F-vim-x2F-filetype-vim-文件中" class="headerlink" title="2. 将该文件夹下的 nginx.vim 复制到 ~&#x2F;.vim&#x2F;syntax&#x2F; 文件夹下，并且在 ~&#x2F;.vim&#x2F;filetype.vim 文件中"></a>2. 将该文件夹下的 nginx.vim 复制到 ~&#x2F;.vim&#x2F;syntax&#x2F; 文件夹下，并且在 ~&#x2F;.vim&#x2F;filetype.vim 文件中</h2>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;au BufRead,BufNewFile /usr/local/src/nginx/conf/* set ft=nginx&quot; &gt;&gt; /root/.vim/filetype.vim</span><br></pre></td></tr></table></figure><h1 id="额外内容"><a href="#额外内容" class="headerlink" title="额外内容"></a>额外内容</h1><p>   <a href="https://xinx.top/archives/45.html">https://xinx.top/archives/45.html</a></p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install kernel-headers</span><br></pre></td></tr></table></figure><p>   Nginx 官网 启动脚本</p><p>   <a href="https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/">https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/</a></p>]]></content>
      
      
      <categories>
          
          <category> vps </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vps 一键 DD</title>
      <link href="/2022/03/19/vps-%E4%B8%80%E9%94%AEdd-%E8%84%9A%E6%9C%AC/"/>
      <url>/2022/03/19/vps-%E4%B8%80%E9%94%AEdd-%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h4 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:</h4><p>​腾讯云自带的一些组件，会阻止我们 DD 安装操作系统（安装过程会报错，无法正确写入进磁盘），所以在 DD 安装操作系统前，必须要禁用、删除掉这些组件.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop tat_agent</span><br><span class="line">systemctl disable tat_agent</span><br><span class="line">rm -rf /etc/systemd/system/tat_agent.service</span><br><span class="line">rm -fr /usr/local/qcloud </span><br><span class="line"> </span><br><span class="line">ps -A | grep agent</span><br><span class="line"># 检查看是否还有腾讯云组件</span><br><span class="line"># kill 这个进程</span><br></pre></td></tr></table></figure><p>​所有腾讯云组件都删除后，就可以 DD 安装 Linux&#x2F;Windows 了.</p><p>​在使用 Centos 系统中使用 DD 脚本，出现该错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Press any key to continue...Error! Not Found grub.</span><br></pre></td></tr></table></figure><p>​Centos下的 grub 是在 &#x2F;boot 下的 grub2 目录下 所以无法安装成功，重装切换到 Ubuntu 系统就不会出现该错误</p><p>​腾讯云请先切换 Ubuntu 的镜像源至中科大镜像源，使用默认镜像源会导致下载缓慢</p><h3 id="安装脚本所需的组件"><a href="#安装脚本所需的组件" class="headerlink" title="-  安装脚本所需的组件"></a>-  安装脚本所需的组件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Debian/Ubuntu</span></span><br><span class="line"></span><br><span class="line"> apt-get install -y xz-utils openssl gawk file curl wget </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">RedHat/CentOS</span></span><br><span class="line"></span><br><span class="line">yum install -y xz openssl gawk file curl wget</span><br></pre></td></tr></table></figure><h3 id="使用-CDN-下载脚本"><a href="#使用-CDN-下载脚本" class="headerlink" title="- 使用 CDN 下载脚本"></a>- 使用 CDN 下载脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://cdn.jsdelivr.net/gh/hiCasper/Shell@master/AutoReinstall.sh &amp;&amp; chmod +x AutoReinstall.sh &amp;&amp; bash AutoReinstall.sh</span><br></pre></td></tr></table></figure><h4 id="选择系统"><a href="#选择系统" class="headerlink" title="- 选择系统"></a>- 选择系统</h4><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/Snipaste_2022-03-19_15-41-16.jpg?raw=true" alt="Snipaste_2022-03-19_15-41-16.jpg"></p><p>​运行到这步，控制台会断开连接，之后需要到腾讯云使用 VNC 连接配置</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/Snipaste_2022-03-19_15-47-38.jpg?raw=true" alt="Snipaste_2022-03-19_15-47-38.jpg"></p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/Snipaste_2022-03-19_15-50-52.jpg?raw=true" alt="Snipaste_2022-03-19_15-50-52.jpg"></p><p>​一路 Continue 就好</p><p><img src="https://gcore.jsdelivr.net/gh/weiqhcode/blogImages@main/Snipaste_2022-03-19_15-53-03.jpg?raw=true" alt="Snipaste_2022-03-19_15-53-03.jpg"></p><p>Centos </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">账号：root</span><br><span class="line">默认密码：Pwd@CentOS</span><br></pre></td></tr></table></figure><p>其他Liunx系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">账号：root</span><br><span class="line">默认密码：Pwd@Linux</span><br></pre></td></tr></table></figure><p>资料来源：</p><p><a href="https://www.2331314.xyz/295.html">https://www.2331314.xyz/295.html</a></p><p><a href="https://www.xugo.xyz/index.php/2021/12/11/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%9B%BD%E5%86%85%E8%BD%BB%E9%87%8F-dd-%E7%B3%BB%E7%BB%9F/">https://www.xugo.xyz/index.php/2021/12/11/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%9B%BD%E5%86%85%E8%BD%BB%E9%87%8F-dd-%E7%B3%BB%E7%BB%9F/</a></p>]]></content>
      
      
      <categories>
          
          <category> vps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>myTest</title>
      <link href="/2021/12/11/myTest/"/>
      <url>/2021/12/11/myTest/</url>
      
        <content type="html"><![CDATA[<p>My first test article.</p>]]></content>
      
      
      <categories>
          
          <category> HelloWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HelloWorld </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
